// Generated by purs version 0.13.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Partial = require("../Data.List.Partial/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var PQueue = function (x) {
    return x;
};
var newtypePQueue = new Data_Newtype.Newtype(function (n) {
    return n;
}, PQueue);
var showPQueue = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show((function () {
            var $21 = Data_Show.show(Data_List_Types.showList(Data_Tuple.showTuple(dictShow)(dictShow1)));
            var $22 = Data_Newtype.unwrap(newtypePQueue);
            return function ($23) {
                return $21($22($23));
            };
        })());
    };
};
var singleton = function (key) {
    return function (value) {
        return Data_Newtype.wrap(newtypePQueue)(Data_List.singleton(new Data_Tuple.Tuple(key, value)));
    };
};
var tail = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Maybe.Just.create(Data_Newtype.wrap(newtypePQueue)(Data_List_Partial.tail()(Data_Newtype.unwrap(newtypePQueue)(v))));
};
var last = (function () {
    var $24 = Data_Newtype.unwrap(newtypePQueue);
    return function ($25) {
        return Data_List.last($24($25));
    };
})();
var isEmpty = (function () {
    var $26 = Data_Newtype.unwrap(newtypePQueue);
    return function ($27) {
        return Data_List["null"]($26($27));
    };
})();
var init = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Maybe.Just.create(Data_Newtype.wrap(newtypePQueue)(Data_List_Partial.init()(Data_Newtype.unwrap(newtypePQueue)(v))));
};
var head = (function () {
    var $28 = Data_Newtype.unwrap(newtypePQueue);
    return function ($29) {
        return Data_List.head($28($29));
    };
})();
var eqShow = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (v) {
            return function (v1) {
                return Data_Eq.eq(Data_List_Types.eqList(Data_Tuple.eqTuple(dictEq)(dictEq1)))(v)(v1);
            };
        });
    };
};
var empty = Data_Newtype.wrap(newtypePQueue)(Data_List_Types.Nil.value);
var cmp = function (dictOrd) {
    return function (a) {
        return function (b) {
            return Data_Ord.compare(dictOrd)(Data_Tuple.fst(a))(Data_Tuple.fst(b));
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return function (dictOrd) {
        return function (f) {
            return Data_Newtype.wrap(newtypePQueue)(Data_List.sortBy(cmp(dictOrd))(Data_List.fromFoldable(dictFoldable)(f)));
        };
    };
};
var insert = function (dictOrd) {
    return function (key) {
        return function (value) {
            return Data_Newtype.over(newtypePQueue)(newtypePQueue)(PQueue)(Data_List.insertBy(cmp(dictOrd))(new Data_Tuple.Tuple(key, value)));
        };
    };
};
module.exports = {
    PQueue: PQueue,
    fromFoldable: fromFoldable,
    empty: empty,
    singleton: singleton,
    isEmpty: isEmpty,
    insert: insert,
    head: head,
    tail: tail,
    init: init,
    last: last,
    newtypePQueue: newtypePQueue,
    eqShow: eqShow,
    showPQueue: showPQueue
};
