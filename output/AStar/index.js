// Generated by purs version 0.13.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine_Aff = require("../Control.Coroutine.Aff/index.js");
var Control_Monad_Loops = require("../Control.Monad.Loops/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_PQueue = require("../Data.PQueue/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Global = require("../Global/index.js");
var Tile = (function () {
    function Tile(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tile.create = function (value0) {
        return function (value1) {
            return new Tile(value0, value1);
        };
    };
    return Tile;
})();
var Up = (function () {
    function Up() {

    };
    Up.value = new Up();
    return Up;
})();
var Down = (function () {
    function Down() {

    };
    Down.value = new Down();
    return Down;
})();
var Left = (function () {
    function Left() {

    };
    Left.value = new Left();
    return Left;
})();
var Right = (function () {
    function Right() {

    };
    Right.value = new Right();
    return Right;
})();
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var FrontierItem = function (x) {
    return x;
};
var successors = function (v) {
    var makePair = function (x$prime) {
        return function (y$prime) {
            return function (a) {
                return new Data_Tuple.Tuple(new Tile(x$prime, y$prime), a);
            };
        };
    };
    return new Data_List_Types.Cons(makePair(v.value0 - 1 | 0)(v.value1)(Left.value), new Data_List_Types.Cons(makePair(v.value0 + 1 | 0)(v.value1)(Right.value), new Data_List_Types.Cons(makePair(v.value0)(v.value1 + 1 | 0)(Up.value), new Data_List_Types.Cons(makePair(v.value0)(v.value1 - 1 | 0)(Down.value), Data_List_Types.Nil.value))));
};
var size = function (v) {
    return Data_Set.size(v.value1);
};
var showTile = new Data_Show.Show(function (v) {
    return "Tile " + (Data_Show.show(Data_Show.showInt)(v.value0) + (", " + Data_Show.show(Data_Show.showInt)(v.value1)));
});
var manhattan = function (neList) {
    return function (tile) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_List_Types.Cons) {
                    return Data_Ord.min(Data_Ord.ordNumber)(Data_Int.toNumber(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(v1.value0 - v.value0.value0 | 0) + Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(v1.value1 - v.value0.value1 | 0) | 0))(go(v.value1)(new Tile(v1.value0, v1.value1)));
                };
                if (v instanceof Data_List_Types.Nil) {
                    return Global.infinity;
                };
                throw new Error("Failed pattern match at AStar (line 190, column 3 - line 190, column 118): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return go(Data_List_Types.toList(neList))(tile);
    };
};
var head = function (v) {
    return Data_Tuple.fst(Data_List_NonEmpty.head(v.path));
};
var front = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(Data_PQueue.head(v.value0));
};
var eqTile = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && x.value1 === y.value1;
    };
});
var goalTest = function (goals) {
    return function (tile) {
        return Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(function (found) {
            return function (goal) {
                return Data_Eq.eq(eqTile)(tile)(goal) || found;
            };
        })(false)(goals);
    };
};
var ordTile = new Data_Ord.Ord(function () {
    return eqTile;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
    };
});
var member = function (i) {
    return function (v) {
        return Data_Set.member(ordTile)(i)(v.value1);
    };
};
var push = function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(Data_PQueue.insert(Data_Ord.ordNumber)(v1.cost)(v1)(v.value0), Data_Set.insert(ordTile)(head(v1))(v.value1));
    };
};
var explore = function (v) {
    return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v1) {
        return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v2) {
            var check = function (tile) {
                return !Data_Set.member(ordTile)(tile)(v1.map) && (!Data_Set.member(ordTile)(tile)(v2.explored) && !member(tile)(v2.frontier));
            };
            var succs = Data_List.filter(function ($130) {
                return check(Data_Tuple.fst($130));
            })(successors(head(v)));
            var items = Data_Functor.map(Data_List_Types.functorList)(function (succ) {
                return {
                    cost: v1.heuristic(v1.goalTiles)(Data_Tuple.fst(succ)) + Data_Int.toNumber(Data_List_NonEmpty.length(v.path) + 1 | 0),
                    path: Data_List_NonEmpty.cons(succ)(v.path)
                };
            })(succs);
            return Control_Monad_State_Class.modify_(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(function (v3) {
                var $91 = {};
                for (var $92 in v3) {
                    if ({}.hasOwnProperty.call(v3, $92)) {
                        $91[$92] = v3[$92];
                    };
                };
                $91.frontier = Data_Foldable.foldl(Data_List_Types.foldableList)(push)(v2.frontier)(items);
                return $91;
            });
        });
    });
};
var init = Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v) {
    var item = {
        cost: v.heuristic(v.goalTiles)(v.startTile),
        path: Data_List_NonEmpty.singleton(new Data_Tuple.Tuple(v.startTile, None.value))
    };
    return Control_Monad_State_Class.modify_(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(function (state) {
        var $100 = {};
        for (var $101 in state) {
            if ({}.hasOwnProperty.call(state, $101)) {
                $100[$101] = state[$101];
            };
        };
        $100.frontier = push(state.frontier)(item);
        return $100;
    });
});
var eqAction = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Up && y instanceof Up) {
            return true;
        };
        if (x instanceof Down && y instanceof Down) {
            return true;
        };
        if (x instanceof Left && y instanceof Left) {
            return true;
        };
        if (x instanceof Right && y instanceof Right) {
            return true;
        };
        if (x instanceof None && y instanceof None) {
            return true;
        };
        return false;
    };
});
var eqFrontierItem = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.cost === y.cost && Data_Eq.eq(Data_List_Types.eqNonEmptyList(Data_Tuple.eqTuple(eqTile)(eqAction)))(x.path)(y.path);
    };
});
var ordFrontierItem = new Data_Ord.Ord(function () {
    return eqFrontierItem;
}, function (v) {
    return function (v1) {
        return Data_Ord.compare(Data_Ord.ordNumber)(v.cost)(v1.cost);
    };
});
var back = function (v) {
    return new Data_Tuple.Tuple(Data_Maybe.fromMaybe(Data_PQueue.empty)(Data_PQueue.tail(v.value0)), Data_Maybe.maybe(v.value1)(Data_Function.flip(Data_Set["delete"](ordTile))(v.value1))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorFn)(head)(Data_Tuple.snd))(Data_PQueue.head(v.value0))));
};
var step = Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_Reader_Class.ask(Control_Monad_RWS_Trans.monadAskRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v) {
    return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v1) {
        var v2 = front(v1.frontier);
        if (v2 instanceof Data_Maybe.Just) {
            var tile = head(v2.value0);
            var $118 = goalTest(v.goalTiles)(tile);
            if ($118) {
                return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(Data_Either.Right.create(new Data_Maybe.Just(v2.value0.path)));
            };
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_State_Class.modify_(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(function (state) {
                var $119 = {};
                for (var $120 in state) {
                    if ({}.hasOwnProperty.call(state, $120)) {
                        $119[$120] = state[$120];
                    };
                };
                $119.frontier = back(v1.frontier);
                $119.maxFrontier = Data_Ord.max(Data_Ord.ordInt)(state.maxFrontier)(size(v1.frontier));
                $119.explored = Data_Set.insert(ordTile)(tile)(state.explored);
                return $119;
            }))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(explore(v2.value0))(function () {
                    return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit)))(function (v3) {
                        return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(new Data_Either.Left(v3.explored));
                    });
                });
            });
        };
        if (v2 instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(new Data_Either.Right(Data_Maybe.Nothing.value));
        };
        throw new Error("Failed pattern match at AStar (line 143, column 3 - line 159, column 43): " + [ v2.constructor.name ]);
    });
});
var astar = function (dictMonadAff) {
    return function (params) {
        var initialState = {
            statesExpanded: 0,
            maxFrontier: 0,
            explored: Data_Set.empty,
            frontier: new Data_Tuple.Tuple(Data_PQueue.empty, Data_Set.empty)
        };
        var go = function (emitter) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(init)(function () {
                return Control_Monad_Loops.whileM_(Control_Monad_RWS_Trans.monadRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(step)(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(Data_Monoid.monoidUnit))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Coroutine_Aff.emit(emitter)(v.value0))))(function () {
                            return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(true);
                        });
                    };
                    if (v instanceof Data_Either.Right) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect_Aff.bindAff)(Data_Monoid.monoidUnit))(Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(Data_Monoid.monoidUnit))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Coroutine_Aff.close(emitter)(v.value0))))(function () {
                            return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(false);
                        });
                    };
                    throw new Error("Failed pattern match at AStar (line 170, column 17 - line 176, column 29): " + [ v.constructor.name ]);
                }))(Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Effect_Aff.monadAff)(Data_Monoid.monoidUnit))(Data_Unit.unit));
            });
        };
        return Control_Coroutine_Aff["produce'"](dictMonadAff)(function (emitter) {
            return Effect_Aff.launchAff_(Control_Monad_RWS_Trans.evalRWST(Effect_Aff.monadAff)(go(emitter))(params)(initialState));
        });
    };
};
module.exports = {
    Up: Up,
    Down: Down,
    Left: Left,
    Right: Right,
    None: None,
    Tile: Tile,
    FrontierItem: FrontierItem,
    front: front,
    push: push,
    member: member,
    head: head,
    goalTest: goalTest,
    back: back,
    size: size,
    init: init,
    successors: successors,
    explore: explore,
    step: step,
    astar: astar,
    manhattan: manhattan,
    eqAction: eqAction,
    showTile: showTile,
    eqTile: eqTile,
    ordTile: ordTile,
    eqFrontierItem: eqFrontierItem,
    ordFrontierItem: ordFrontierItem
};
