// Generated by purs version 0.13.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine_Aff = require("../Control.Coroutine.Aff/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect = require("../Effect/index.js");
var Record_Extra = require("../Record.Extra/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var Web_DOM_NonElementParentNode = require("../Web.DOM.NonElementParentNode/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Play = (function () {
    function Play(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Play.create = function (value0) {
        return function (value1) {
            return new Play(value0, value1);
        };
    };
    return Play;
})();
var Draw = (function () {
    function Draw(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Draw.create = function (value0) {
        return function (value1) {
            return new Draw(value0, value1);
        };
    };
    return Draw;
})();
var Erase = (function () {
    function Erase(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Erase.create = function (value0) {
        return function (value1) {
            return new Erase(value0, value1);
        };
    };
    return Erase;
})();
var Move = (function () {
    function Move(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Move.create = function (value0) {
        return function (value1) {
            return new Move(value0, value1);
        };
    };
    return Move;
})();
var Reset = (function () {
    function Reset(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Reset.create = function (value0) {
        return function (value1) {
            return new Reset(value0, value1);
        };
    };
    return Reset;
})();
var MouseMove = (function () {
    function MouseMove(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MouseMove.create = function (value0) {
        return function (value1) {
            return new MouseMove(value0, value1);
        };
    };
    return MouseMove;
})();
var makeListeners = function (ids) {
    return function (domElementMap) {
        return function (emitter) {
            var toConstructorList = function (id) {
                if (id === "play") {
                    return new Data_List_Types.Cons(Play.create, Data_List_Types.Nil.value);
                };
                if (id === "draw") {
                    return new Data_List_Types.Cons(Draw.create, Data_List_Types.Nil.value);
                };
                if (id === "erase") {
                    return new Data_List_Types.Cons(Erase.create, Data_List_Types.Nil.value);
                };
                if (id === "move") {
                    return new Data_List_Types.Cons(Move.create, Data_List_Types.Nil.value);
                };
                if (id === "reset") {
                    return new Data_List_Types.Cons(Reset.create, Data_List_Types.Nil.value);
                };
                if (id === "astar-vis") {
                    return new Data_List_Types.Cons(MouseMove.create, Data_List_Types.Nil.value);
                };
                return Data_List_Types.Nil.value;
            };
            var listen = function ($23) {
                return Web_Event_EventTarget.eventListener((function (v) {
                    var $24 = Control_Coroutine_Aff.emit(emitter);
                    return function ($25) {
                        return $24(v($25));
                    };
                })($23));
            };
            var toListeners = function (id) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(Effect.applicativeEffect)(Data_Functor.map(Data_List_Types.functorList)(function ($26) {
                    return listen((function (v) {
                        return v(domElementMap);
                    })($26));
                })(toConstructorList(id)));
            };
            return Record_Extra.sequenceRecord()(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
                return "canvas";
            }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
                return "draw";
            }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
                return "erase";
            }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
                return "move";
            }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
                return "play";
            }))()(Effect.applyEffect)(Record_Extra.sequenceRecordSingle(new Data_Symbol.IsSymbol(function () {
                return "reset";
            }))()(Effect.functorEffect)()())()())()())()())()())()())(Record_Extra.mapRecord()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "canvas";
            }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "draw";
            }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "erase";
            }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "move";
            }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "play";
            }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                return "reset";
            }))()(Record_Extra.mapRecordNil)()())()())()())()())()())()())(toListeners)(ids));
        };
    };
};
var fromId = function (id) {
    return function __do() {
        var v = Web_HTML.window();
        var v1 = Web_HTML_Window.document(v)();
        return Web_DOM_NonElementParentNode.getElementById(id)(Web_HTML_HTMLDocument.toNonElementParentNode(v1))();
    };
};
var fromIds = function (ids) {
    return Record_Extra.sequenceRecord()(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "canvas";
    }))()(Control_Monad_Maybe_Trans.applyMaybeT(Effect.monadEffect))(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "draw";
    }))()(Control_Monad_Maybe_Trans.applyMaybeT(Effect.monadEffect))(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "erase";
    }))()(Control_Monad_Maybe_Trans.applyMaybeT(Effect.monadEffect))(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "move";
    }))()(Control_Monad_Maybe_Trans.applyMaybeT(Effect.monadEffect))(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "play";
    }))()(Control_Monad_Maybe_Trans.applyMaybeT(Effect.monadEffect))(Record_Extra.sequenceRecordSingle(new Data_Symbol.IsSymbol(function () {
        return "reset";
    }))()(Control_Monad_Maybe_Trans.functorMaybeT(Effect.functorEffect))()())()())()())()())()())()())(Record_Extra.mapRecord()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "canvas";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "draw";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "erase";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "move";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "play";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "reset";
    }))()(Record_Extra.mapRecordNil)()())()())()())()())()())()())(function ($27) {
        return Control_Monad_Maybe_Trans.MaybeT(fromId($27));
    })(ids));
};
var attachListeners = function (elements) {
    var toEventTypes = function (id) {
        if (id === "astar-vis") {
            return new Data_List_Types.Cons("mousemove", Data_List_Types.Nil.value);
        };
        return new Data_List_Types.Cons("click", Data_List_Types.Nil.value);
    };
    var attach = function (domElement) {
        return function (listener) {
            return function (eventType) {
                return Web_Event_EventTarget.addEventListener(eventType)(listener)(false)(Web_DOM_Element.toEventTarget(domElement));
            };
        };
    };
    var attachAll = function (v) {
        return Data_Traversable.sequence(Data_List_Types.traversableList)(Effect.applicativeEffect)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(attach(v.domElement)))(Data_List.zip(v.listeners)(toEventTypes(v.id))));
    };
    return Data_Functor["void"](Effect.functorEffect)(Record_Extra.sequenceRecord()(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "canvas";
    }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "draw";
    }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "erase";
    }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "move";
    }))()(Effect.applyEffect)(Record_Extra.sequenceRecordCons(new Data_Symbol.IsSymbol(function () {
        return "play";
    }))()(Effect.applyEffect)(Record_Extra.sequenceRecordSingle(new Data_Symbol.IsSymbol(function () {
        return "reset";
    }))()(Effect.functorEffect)()())()())()())()())()())()())(Record_Extra.mapRecord()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "canvas";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "draw";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "erase";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "move";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "play";
    }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
        return "reset";
    }))()(Record_Extra.mapRecordNil)()())()())()())()())()())()())(attachAll)(elements)));
};
var producer = function (dictMonadAff) {
    var zipRecordWith = function (fn) {
        return function (r1) {
            return function (r2) {
                return Record_Extra.mapRecord()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "canvas";
                }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "draw";
                }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "erase";
                }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "move";
                }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "play";
                }))()(Record_Extra.mapRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "reset";
                }))()(Record_Extra.mapRecordNil)()())()())()())()())()())()())(Data_Tuple.uncurry(fn))(Record_Extra.zipRecord()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "canvas";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "draw";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "erase";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "move";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "play";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "reset";
                }))()()()()(Record_Extra.zipRecordNil)))))))(r1)(r2));
            };
        };
    };
    var runMaybeT_ = (function () {
        var $28 = Data_Functor["void"](Effect.functorEffect);
        return function ($29) {
            return $28(Control_Monad_Maybe_Trans.runMaybeT($29));
        };
    })();
    var ids = {
        play: "play",
        draw: "draw",
        erase: "erase",
        move: "move",
        reset: "reset",
        canvas: "astar-vis"
    };
    var createRecord = function (listeners) {
        return function (v) {
            return {
                listeners: listeners,
                id: v.value0,
                domElement: v.value1
            };
        };
    };
    return Control_Coroutine_Aff["produce'"](dictMonadAff)(function (emitter) {
        return runMaybeT_(Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Effect.monadEffect))(fromIds(ids))(function (v) {
            return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Effect.monadEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Effect.monadEffect)(makeListeners(ids)(v)(emitter)))(function (v1) {
                var zipped = zipRecordWith(createRecord)(v1)(Record_Extra.zipRecord()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "canvas";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "draw";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "erase";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "move";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "play";
                }))()()()()(Record_Extra.zipRecordCons(new Data_Symbol.IsSymbol(function () {
                    return "reset";
                }))()()()()(Record_Extra.zipRecordNil)))))))(ids)(v));
                return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Effect.monadEffect)(attachListeners(zipped));
            });
        }));
    });
};
module.exports = {
    Play: Play,
    Draw: Draw,
    Erase: Erase,
    Move: Move,
    Reset: Reset,
    MouseMove: MouseMove,
    fromId: fromId,
    fromIds: fromIds,
    makeListeners: makeListeners,
    attachListeners: attachListeners,
    producer: producer
};
